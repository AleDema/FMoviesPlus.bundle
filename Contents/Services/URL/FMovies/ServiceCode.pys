import urllib2, re

# import Shared ServiceCode
import openload as Openload
import constants as Constants

####################################################################################################
def NormalizeURL(url):
	
	return url

####################################################################################################
def MetadataObjectForURL(url):

	data = get_data(url)
	isOpenLoad = data['isOpenLoad']
	title = data['title']
	isVideoOnline = data['isVideoOnline'].lower()
	
	status = ''
	# not using - since very few clients seem to support
	#if isVideoOnline == 'unknown':
	#	status = ''
	#elif isVideoOnline == 'true':
	#	status = u'\U0001F517' + ' '
	#else:
	#	status = u'\U0001F494' + ' '
	
	furl = data['url']
	summary = data['summary']
	thumb = data['thumb']
	art = data['art']
	
	try:
		content_rating = data['content_rating']
	except:
		content_rating = None
	
	try:
		year = data['year']
		year = int(year)
	except:
		year = None
		
	try:
		studio = data['studio']
	except:
		studio = None
		
	try:
		genres_a = []
		genres = data['genre']
		for g in genres.split(','):
			if g != '':
				genres_a.append(g.strip())
	except:
		pass
		
	try:
		writers_a = []
		writers = data['writers']
		for w in writers.split(','):
			if w != '':
				writers_a.append({'name': w.strip()})
	except:
		pass
	
	try:
		directors_a = []
		directors = data['directors']
		for d in directors.split(','):
			if d != '':
				directors_a.append({'name': d.strip()})
	except:
		pass
		
	try:
		roles_a = []
		roles = data['roles']
		for r in roles.split(','):
			if r != '':
				roles_a.append({'name': r.strip()})
	except:
		pass
	
	try:
		rating = float(data['rating'])
	except:
		rating = None
		
	try:
		duration = int(data['duration']) * 60 * 1000
	except:
		duration = None

	return MovieObject(
		title = status + title,
		url = furl,
		summary = summary,
		rating = rating,
		duration = duration,
		content_rating = content_rating,
		studio = studio,
		year = year,
		genres = genres_a,
		writers = writers_a,
		directors = directors_a,
		roles = roles_a,
		art = art,
		thumb = Resource.ContentsOfURLWithFallback(url = thumb, fallback='MoviePosterUnavailable.jpg')
	)

####################################################################################################
def MediaObjectsForURL(url):

	data = get_data(url)
	isOpenLoad = data['isOpenLoad']
	title = data['title']
	isVideoOnline = data['isVideoOnline'].lower()
	media_obj = []
	
	# Plex does not throw a dialog for Ex.MediaNotAvailable ???
	#if isVideoOnline != 'unknown' and isVideoOnline != 'true':
	#	raise Ex.MediaNotAvailable
	
	if isOpenLoad.lower() == 'true':
		ourl = data['server']
		
		mo = MediaObject(
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True,
			parts = [PartObject(key=Callback(PlayVideo, url=ourl, isOpenLoad=True))]
		)
		media_obj.append(mo)
		
	else:
		files = JSON.ObjectFromString(data['server'])
		
		sortable_list = []
		for file in files:
			furl = file['file']
			res = file['label'].replace('p','')
			if res != '1080':
				res = '0'+res
			type = file['type']
			
			sortable_list.append({'label': res, 'file':furl, 'type':type})
			
		newlist = sorted(sortable_list, key=lambda k: k['label'], reverse=True)
		
		for file in newlist:
			furl = file['file']
			res = int(file['label'])
			type = file['type']
			
			if type == 'flv' or '.flv' in furl:
				mo = MediaObject(
						container = Container.FLV,
						video_codec = VideoCodec.H264,
						audio_codec = AudioCodec.AAC,
						video_resolution = res,
						audio_channels = 2,
						optimized_for_streaming = True,
						parts = [PartObject(key=Callback(PlayVideo, url=furl))]
					)
			elif type == '.m3u8' or '.m3u8' in furl:
				mo = MediaObject(
						protocol = 'hls',
						container = 'mpegts',
						audio_codec = AudioCodec.AAC,
						video_resolution = res,
						audio_channels = 2,
						optimized_for_streaming = True,
						parts = [PartObject(key=Callback(PlayVideo, url=furl))]
					)
			else:
				mo = MediaObject(
						container = Container.MP4,
						video_codec = VideoCodec.H264,
						audio_codec = AudioCodec.AAC,
						video_resolution = res,
						audio_channels = 2,
						optimized_for_streaming = True,
						parts = [PartObject(key=Callback(PlayVideo, url=furl))]
					)
			
			media_obj.append(mo)
		
	return media_obj

####################################################################################################
@indirect
def PlayVideo(url, isOpenLoad=False):

	try:
		if isOpenLoad:
			url = Openload.openload(url)
	except:
		raise Ex.MediaNotAvailable

	http_headers = {'User-Agent': Constants.USER_AGENT}
		
	if '.m3u8' in url:
		return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(url), http_headers=http_headers)
	else:
		return IndirectResponse(VideoClipObject, key=url, http_headers=http_headers)

####################################################################################################
def get_data(url):
	return JSON.ObjectFromString(D(url.split('fmovies://')[1]))
	
#########################################################################################################
