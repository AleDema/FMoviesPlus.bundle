#!/usr/bin/env python

import urllib2, re

from __builtin__ import ord

#########################################################################################################
#
# OpenLoad scrapper
#
# Coder Alpha
# https://github.com/coder-alpha
#
# Adapted from youtube-dl
# https://github.com/rg3/youtube-dl
# and modified for use with Plex Media Server
#
#########################################################################################################

USER_AGENT = "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0"

openloadhdr = {
	'User-Agent': USER_AGENT,
	'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
	'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.3',
	'Accept-Encoding': 'none',
	'Accept-Language': 'en-US,en;q=0.8',
	'Connection': 'keep-alive'}

def openload(url):
	try:
		openloadhdr['Referer'] = url
		req = urllib2.Request(url, None, openloadhdr)
		res = urllib2.urlopen(req)
		webpage = res.read()

		if 'File not found' in webpage or 'deleted by the owner' in webpage or 'Sorry!' in webpage:
			print 'File removed'
			return None

		ol_id = search_regex('<span[^>]+id="[^"]+"[^>]*>([0-9A-Za-z]+)</span>',webpage, 'openload ID')

		video_url = openloadURLfromID(ol_id=ol_id)

		return video_url
	except Exception as e:
		print ('ERROR openload.pys>openload: Args:%s Url:%s' % (e.args, url))
		return None
		
def openloadURLfromID(ol_id):
	try:
		first_char = int(ol_id[0])
		urlcode = []
		num = 1

		while num < len(ol_id):
			i = ord(ol_id[num])
			key = 0
			if i <= 90:
				key = i - 65
			elif i >= 97:
				key = 25 + i - 97
			urlcode.append((key, compat_chr(int(ol_id[num + 2:num + 5]) // int(ol_id[num + 1]) - first_char)))
			num += 5

		urllink = ''.join([value for _, value in sorted(urlcode, key=lambda x: x[0])])

		video_url = 'https://openload.co/stream/' + urllink

		return video_url
	except Exception as e:
		print ('ERROR openload.pys>openloadURLfromID: Args:%s ol_id:%s' % (e.args, ol_id))
		return None
		
try:
    compat_chr = unichr  # Python 2
except NameError:
    compat_chr = chr
	
def search_regex(pattern, string, name, default=None, fatal=True, flags=0, group=None):
	mobj = re.search(pattern, string, flags)
	if mobj:
		if group is None:
		# return the first matching group
			#return next(g for g in mobj.groups() if g is not None) -- next function is Python 2.6+
			myIterator  = (g for g in mobj.groups() if g is not None)
			for nextval in myIterator:
				return nextval
		else:
			return mobj.group(group)
	else:
		return None
	
def testOpenLoad():
	print openload('https://openload.co/embed/jcR8gjl6KoA/')

#testOpenLoad()